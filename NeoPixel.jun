module NeoPixel
include("<Adafruit_NeoPixel.h>")
open(Io, Time)

// The ptr here should be a Adafruit_NeoPixel object
type RawDevice = device(ptr)

alias DeviceDescriptor = {
    pin : uint16
}

type color = RGB(uint8, uint8, uint8)

type Function =
rotate(int16)
| set(color)
| alternate(color, color)

type Action =
    start()
    | run(uint8, Function)
    | repeat(uint8, Function, uint32, maybe<uint8>)
    | endRepeat(uint8)

alias Operation = {
    function : Function,
    interval : uint32,
    timer : timerState,
    endAfter : maybe<uint8>
}

alias Line<nPixels : int> = {
    previousPixels : list<color, nPixels>,
    pixels : list<color, nPixels>,
    operation : maybe<Operation>,
    pin : uint16,
    device : maybe<RawDevice>
}

alias Model<nLines : int, nPixels : int> = {
    lines : list<Line<nPixels> ref, nLines>
}

let mut startAction : maybe<Action> = just(
    start()
)

fun actions(
    inout prevAction : maybe<Action>
) : sig<maybe<Action>> = {
    Signal:mergeMany(
        {
            data := [
                SignalExt:once(inout startAction),
                SignalExt:once(inout prevAction)
            ],
            length := 2
        }
    ) |> Signal:meta()
}

fun initialState(
    descriptors : DeviceDescriptor[nLines], 
    nPixels : uint16
) : Model<nLines, m> ref = {
    ref {
        lines := { 
            data := descriptors, 
            length := cast(nLines) 
        } |> List:map(
            (descriptor) => {
                let device = nothing()
                let pixels : list<color, nPixels> = readPixels(device)
                ref {
                    previousPixels := pixels,
                    pixels := pixels,
                    operation := nothing(),
                    pin := descriptor.pin,
                    device := device
                }
            }
        )
    }
}

fun readPixels(device : maybe<RawDevice>) : list<color, n> = {
    let mut color = 0u32
    let mut pixels: color[n] = zeros()
    match device {
        just(device) => {
            for i in 0u16 .. cast(n) {
                getPixelColor(i, device)
                pixels[i] = RGB(
                    toUInt8(color >> 16u32), 
                    toUInt8(color >> 8u32), 
                    toUInt8(color)
                )
            }
            ()
        }
        nothing() => ()
    }
    { data := pixels, length := cast(n) }
}

fun makeDevice(pin : uint16, pixels : uint16) : RawDevice = {
    var ret : ptr
    # ret = new Adafruit_NeoPixel(pixels, pin, NEO_GRB + NEO_KHZ800); #
    NeoPixel:device(ret)
}

fun runOperation(
    f : (Function) -> unit,
    operation : maybe<Operation>
) : maybe<Operation> = {
    operation |> Maybe:map(
        (operation) => {
            let mut operation = operation
            Time:every(
                operation.interval,
                inout operation.timer
            ) |> Signal:sink(
                (_) => {
                    f(operation.function)
                }
            )
            operation
        }
    )
}

fun updateOperation(operation : maybe<Operation>) : maybe<Operation> = {
    # Serial.println("updateOperation"); #
    operation |> MaybeExt:flatMap(
        (operation) => {
            match operation.endAfter {
                just(0) => {
                    nothing()
                }
                _ => {
                    just({ 
                        function := operation.function,
                        interval := operation.interval,
                        timer := operation.timer,
                        endAfter := operation.endAfter |> Maybe:map(
                            (n) => {
                                Math:max_(0, n - 1)
                            }
                        )
                    })
                }
            }
        }
    )
}

fun updateLine(line : Line<n> ref, fn : Function) = {
    line->previousPixels = line->pixels
    line->pixels = applyFunction(
        fn,
        line->previousPixels
    )
    writePixels(line)
}

fun writePixels(line : Line<n> ref) = {
    diffPixels(
        line->previousPixels,
        line->pixels
    ) |> ListExt:enumerated(
    ) |> List:iter(
        (tup) => {
            let (index, color) = tup
            match color {
                just(pixel) => match line->device {
                    just(device) => setPixelColor(cast(index), pixel, device)
                    nothing() => # Serial.println("setPixelColor"); #
                }
                nothing() => ()
            }
        }
    )
    match line->device {
        just(device) => show(device)
        nothing() => # Serial.println("show"); #
    }
}

type Update = 
    action(Action)
    | operation()

fun update(
    act : maybe<Action>, 
    model : Model<nLines, nPixels> ref
) = {
    # Serial.println("update"); #
    Signal:mergeMany(
        {
            data := [
                signal(act) |> Signal:map(action),
                Signal:constant(operation())
            ],
            length := 2
        }
    ) |> Signal:sink(
        (update) => {
            match update {
                action(action) => {
                    # Serial.println("action"); #
                    match action {
                        start() => {
                        # Serial.println("start"); #
                            model->lines |> List:iter(
                                (line) => {
                                    match line->device {
                                        just(device) => begin(device)
                                        nothing() => # Serial.println("begin"); #
                                    }
                                }
                            )
                        }
                        run(line, fn) => {
                            # Serial.println("run"); #
                            updateLine(
                                model->lines.data[line],
                                fn
                            )
                        }
                        repeat(line, fn, interval, endAfter) => {
                            # Serial.println("repeat"); #
                            updateLine(
                                model->lines.data[line],
                                fn
                            )
                            model->lines.data[line]->operation = just(
                                {
                                    function := fn,
                                    interval := interval,
                                    timer := Time:state,
                                    endAfter := endAfter
                                }
                            )
                            ()
                        }
                        endRepeat(line) => {
                            # Serial.println("endRepeat"); #
                            model->lines.data[line]->operation = nothing()
                            ()
                        }
                    }
                }
                operation() => {
                    # Serial.println("operation"); #
                    model->lines |> List:iter(
                        (line) => {
                            line->operation = updateOperation(
                                line->operation
                            ) |> runOperation(
                                (function) => {
                                    updateLine(line, function)
                                }
                            )
                            ()
                        }
                    )
                }
            }
        }
    )
}

fun applyFunction(
    fn : Function, 
    pixels : list<color, nPixels>
) : list<color, nPixels> = {
    match fn {
        rotate(step) => {
            # Serial.println("Rotate"); #
            ListExt:rotated(cast(step), pixels)
        }
        set(color) => {
            # Serial.println("Set color"); #
            List:map(
                (_) => color,
                pixels
            )
        }
        alternate(c1, c2) => {
            # Serial.println("Alternate"); #
            ListExt:replicateList(
                cast(nPixels),
                { data := [c1, c2], length := 2 }
            )
        }
    }
}

fun diffPixels(
    current : list<color, nPixels>, 
    next : list<color, nPixels>
) : list<maybe<color>, nPixels> = {
    List:zip(
       current,
       next
    ) |> List:map(
        (tup) => {
            let (curr, next) = tup
            if eq(curr, next)
                nothing()
            else
                just(next)
        }
    )
}

fun setPixelColor(n : uint16, color : color, line : RawDevice) : unit = {
    let device(p) = line
    let RGB(r, g, b) = color
    # ((Adafruit_NeoPixel*) p)->setPixelColor(n, r, g, b); #
}

fun getPixelColor(n : uint16, line : RawDevice) : color = {
    let device(p) = line
    let mut numRep : uint32 = 0
    # numRep = ((Adafruit_NeoPixel*) p)->getPixelColor(n); #
    RGB(
        toUInt8(numRep >> 16u32), 
        toUInt8(numRep >> 8u32), 
        toUInt8(numRep)
    )
}

fun setBrightness(level : uint8, line : RawDevice) : unit = {
    let device(p) = line
    # ((Adafruit_NeoPixel*) p)->setBrightness(level); #
}

fun getBrightness(line : RawDevice) : uint8 = {
    let mut ret : uint8 = 0
    let device(p) = line
    # ret = ((Adafruit_NeoPixel*) p)->getBrightness(); #
    ret
}

fun begin(line : RawDevice) : unit = {
    let device(p) = line
    # ((Adafruit_NeoPixel*) p)->begin(); #
}

fun show(line : RawDevice) : unit = {
    let device(p) = line
    # ((Adafruit_NeoPixel*) p)->show(); #
}

fun clear(line : RawDevice) : unit = {
    let device(p) = line
    # ((Adafruit_NeoPixel*) p)->clear(); #
}

fun canShow(line : RawDevice) : bool = {
    let mut ret = false
    let device(p) = line
    # ret = ((Adafruit_NeoPixel*) p)->canShow(); #
    ret
}